import { PrismaClient } from '@prisma/client';

import { DatabaseConfig, DatabaseFactory } from './DatabaseFactory';

export class DatabaseInitializer {
  private static instance: DatabaseInitializer;
  private databaseFactory: DatabaseFactory;
  private prismaClient: PrismaClient | null = null;

  private constructor() {
    this.databaseFactory = DatabaseFactory.getInstance();
  }

  static getInstance(): DatabaseInitializer {
    if (!DatabaseInitializer.instance) {
      DatabaseInitializer.instance = new DatabaseInitializer();
    }
    return DatabaseInitializer.instance;
  }

  /**
   * Inicializa a conex√£o com o banco de dados
   */
  async initialize(): Promise<PrismaClient> {
    if (this.prismaClient) {
      console.log('üîÑ Reutilizando conex√£o existente com banco de dados');
      return this.prismaClient;
    }

    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL √© obrigat√≥ria');
    }

    const config: DatabaseConfig = {
      useCloudSql: process.env.USE_CLOUD_SQL === 'true',
      instanceConnectionName: process.env.INSTANCE_CONNECTION_NAME,
      databaseUrl: process.env.DATABASE_URL,
    };

    try {
      console.log('\n' + '='.repeat(60));
      console.log('üöÄ INICIALIZANDO CONEX√ÉO COM BANCO DE DADOS');
      console.log('='.repeat(60));

      // Mostrar configura√ß√£o atual
      this.logDatabaseConfiguration(config);

      this.prismaClient = await this.databaseFactory.createConnection(config);

      // Testar conex√£o
      await this.prismaClient.$queryRaw`SELECT 1`;

      // Log de sucesso com informa√ß√µes do banco
      this.logConnectionSuccess(config);

      return this.prismaClient;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar banco de dados:', error);
      throw error;
    }
  }

  /**
   * Mostra a configura√ß√£o do banco de dados
   */
  private logDatabaseConfiguration(config: DatabaseConfig): void {
    console.log('üìã CONFIGURA√á√ÉO DO BANCO:');
    console.log(
      `   üîß Modo: ${config.useCloudSql ? '‚òÅÔ∏è  GOOGLE CLOUD SQL' : 'üè† POSTGRESQL LOCAL'}`
    );

    if (config.useCloudSql) {
      console.log(
        `   üì° Inst√¢ncia: ${config.instanceConnectionName || 'N√ÉO CONFIGURADA'}`
      );
      console.log(`   üîê Autentica√ß√£o: IAM (Google Cloud)`);
    } else {
      console.log(`   üîê Autentica√ß√£o: Credenciais locais`);
    }

    // Mostrar informa√ß√µes da URL (sem senha)
    const urlInfo = this.parseDatabaseUrl(config.databaseUrl);
    console.log(`   üóÑÔ∏è  Banco: ${urlInfo.database}`);
    console.log(`   üë§ Usu√°rio: ${urlInfo.username}`);
    console.log(`   üåê Host: ${urlInfo.host}`);
    console.log(`   üö™ Porta: ${urlInfo.port}`);
    console.log('='.repeat(60));
  }

  /**
   * Mostra informa√ß√µes de sucesso da conex√£o
   */
  private logConnectionSuccess(config: DatabaseConfig): void {
    console.log('‚úÖ CONEX√ÉO ESTABELECIDA COM SUCESSO!');
    console.log('='.repeat(60));
    console.log(
      `üéØ Banco ativo: ${config.useCloudSql ? 'Google Cloud SQL' : 'PostgreSQL Local'}`
    );
    console.log(`‚è∞ Timestamp: ${new Date().toLocaleString('pt-BR')}`);
    console.log('='.repeat(60) + '\n');
  }

  /**
   * Parse da URL do banco para extrair informa√ß√µes
   */
  private parseDatabaseUrl(databaseUrl: string): {
    host: string;
    port: string;
    username: string;
    database: string;
  } {
    try {
      const url = new URL(databaseUrl);
      return {
        host: url.hostname,
        port: url.port || '5432',
        username: url.username,
        database: url.pathname.substring(1),
      };
    } catch {
      return {
        host: 'unknown',
        port: 'unknown',
        username: 'unknown',
        database: 'unknown',
      };
    }
  }

  /**
   * Obt√©m a inst√¢ncia do PrismaClient
   */
  getPrismaClient(): PrismaClient {
    if (!this.prismaClient) {
      throw new Error(
        'Banco de dados n√£o foi inicializado. Chame initialize() primeiro.'
      );
    }
    return this.prismaClient;
  }

  /**
   * Verifica se o banco est√° conectado
   */
  isConnected(): boolean {
    return this.databaseFactory.isConnected();
  }

  /**
   * Fecha a conex√£o com o banco
   */
  async close(): Promise<void> {
    try {
      await this.databaseFactory.closeConnections();
      this.prismaClient = null;
      console.log('‚úÖ Conex√£o com banco de dados fechada');
    } catch (error) {
      console.error('‚ùå Erro ao fechar conex√£o com banco:', error);
      throw error;
    }
  }
}
