import { IModuleRepository } from '../interfaces/IModuleRepository';

export class GetUniqueMqttTopicsUseCase {
  constructor(private moduleRepository: IModuleRepository) {}

  async execute(tenantId?: string): Promise<string[]> {
    try {
      console.log('üîç Buscando m√≥dulos para gerar t√≥picos MQTT...');

      let modules: any[] = [];

      if (tenantId) {
        // Buscar m√≥dulos de um tenant espec√≠fico
        // console.log(`üîç Buscando m√≥dulos do tenant: ${tenantId}`);
        modules = await this.moduleRepository.findAll({ tenantId });
      } else {
        // Buscar m√≥dulos de TODOS os tenants
        // console.log('üîç Buscando m√≥dulos de TODOS os tenants...');
        modules = await this.moduleRepository.findAllModules();
        // console.log(`üìä Total de m√≥dulos encontrados: ${modules.length}`);
      }

      if (!modules || modules.length === 0) {
        console.log('‚ö†Ô∏è Nenhum m√≥dulo encontrado no banco de dados');
        console.log('‚ÑπÔ∏è Sistema din√¢mico aguardando m√≥dulos serem cadastrados');
        return [];
      }

      // console.log(`üìä Encontrados ${modules.length} m√≥dulos no banco`);

      const uniqueTopics = new Set<string>();

      for (const module of modules) {
        // Construir t√≥pico baseado na estrutura do m√≥dulo
        const customer = module.customer.toLowerCase();
        const country = module.country.toLowerCase();
        const city = module.city.toLowerCase();

        // Formato: customer/country_city/#
        const topic = `${customer}/${country}_${city}/#`;

        uniqueTopics.add(topic);

        // console.log(`üìã M√≥dulo: ${module.customer}/${module.country}_${module.city} ‚Üí T√≥pico: ${topic}`);
      }

      const topicsArray = Array.from(uniqueTopics);
      console.log(
        `‚úÖ Gerados ${topicsArray.length} t√≥picos √∫nicos:`,
        topicsArray
      );

      return topicsArray;
    } catch (error) {
      console.error('‚ùå Erro ao buscar t√≥picos √∫nicos:', error);
      throw error;
    }
  }
}
