import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

import { logger } from '../src/infrastructure/logging';

const prisma = new PrismaClient();

async function main() {
  logger.database('üå± Iniciando seed de desenvolvimento...');

  // Criar tenant da Groupwork
  const groupworkTenant = await prisma.tenant.upsert({
    where: { cnpj: '08.578.421/0001-06' },
    update: {},
    create: {
      name: 'Groupwork',
      cnpj: '08.578.421/0001-06',
      address:
        'R. Sen. Vergueiro, 167 - Centro, S√£o Caetano do Sul - SP, 09521-320',
      is_active: true,
    },
  });

  logger.success(`‚úÖ Tenant Groupwork criado: ${groupworkTenant.name}`);

  // Criar role de root com acesso total
  let rootRole = await prisma.role.findFirst({
    where: {
      name: 'ROOT',
      tenant_id: groupworkTenant.tenant_id,
    },
  });

  if (!rootRole) {
    rootRole = await prisma.role.create({
      data: {
        name: 'ROOT',
        description: 'Root user with full system access',
        tenant_id: groupworkTenant.tenant_id,
      },
    });
  }

  logger.success('‚úÖ Role ROOT criada');

  // Criar usu√°rio root da Groupwork
  const hashedPassword = await bcrypt.hash('Root@2024', 10);
  const rootUser = await prisma.user.upsert({
    where: { email: 'root@groupwork.com.br' },
    update: {},
    create: {
      name: 'System Root',
      email: 'root@groupwork.com.br',
      password: hashedPassword,
      user_type: 'root',
      first_login: false,
      is_active: true,
      tenant_id: groupworkTenant.tenant_id,
    },
  });

  logger.success(`‚úÖ Root criado: ${rootUser.email}`);

  // Associar role de root ao usu√°rio
  await prisma.userRole.upsert({
    where: {
      user_id_role_id: {
        user_id: rootUser.user_id,
        role_id: rootRole.role_id,
      },
    },
    update: {},
    create: {
      user_id: rootUser.user_id,
      role_id: rootRole.role_id,
    },
  });

  logger.success('‚úÖ Role de root atribu√≠da ao usu√°rio');

  // Criar aplica√ß√£o principal
  const mainApp = await prisma.application.upsert({
    where: { name: 'MAIN_APP' },
    update: {},
    create: {
      name: 'MAIN_APP',
      displayName: 'Smart Trace Platform',
      description: 'Main application for Smart Trace platform',
      isActive: true,
    },
  });

  logger.success(`‚úÖ Aplica√ß√£o criada: ${mainApp.displayName}`);

  // Criar aplica√ß√µes Trace
  const traceApps = [
    {
      name: 'P_TRACE',
      displayName: 'P-Trace',
      description: 'Production Trace - Rastreamento de produ√ß√£o',
    },
    {
      name: 'D_TRACE',
      displayName: 'D-Trace',
      description: 'Development Trace - Rastreamento de desenvolvimento',
    },
    {
      name: 'M_TRACE',
      displayName: 'M-Trace',
      description: 'Manufacturing Trace - Rastreamento de manufatura',
    },
    {
      name: 'E_TRACE',
      displayName: 'E-Trace',
      description: 'Enterprise Trace - Rastreamento empresarial',
    },
  ];

  const createdApps = [mainApp];

  for (const appData of traceApps) {
    const app = await prisma.application.upsert({
      where: { name: appData.name },
      update: {},
      create: {
        name: appData.name,
        displayName: appData.displayName,
        description: appData.description,
        isActive: true,
      },
    });
    createdApps.push(app);
    logger.success(`‚úÖ Aplica√ß√£o criada: ${app.displayName}`);
  }

  // Criar subscriptions do tenant para todas as aplica√ß√µes
  for (const app of createdApps) {
    await prisma.tenantSubscription.upsert({
      where: {
        tenantSubscription_id: `${groupworkTenant.tenant_id}_${app.application_id}`,
      },
      update: {},
      create: {
        tenantSubscription_id: `${groupworkTenant.tenant_id}_${app.application_id}`,
        isActive: true,
        subscriptionPlan: 'ENTERPRISE',
        maxUsers: 1000,
        tenant_id: groupworkTenant.tenant_id,
        application_id: app.application_id,
      },
    });
  }

  logger.success('‚úÖ Subscriptions do tenant criadas para todas as aplica√ß√µes');

  // Criar permiss√µes espec√≠ficas do sistema para todas as aplica√ß√µes
  const systemPermissions = [
    // Users permissions
    {
      function_name: 'users',
      permission_level: 'read',
      display_name: 'Visualizar Usu√°rios',
      description: 'Permiss√£o para visualizar usu√°rios',
    },
    {
      function_name: 'users',
      permission_level: 'write',
      display_name: 'Criar Usu√°rios',
      description: 'Permiss√£o para criar usu√°rios',
    },
    {
      function_name: 'users',
      permission_level: 'update',
      display_name: 'Editar Usu√°rios',
      description: 'Permiss√£o para editar usu√°rios',
    },
    {
      function_name: 'users',
      permission_level: 'delete',
      display_name: 'Excluir Usu√°rios',
      description: 'Permiss√£o para excluir usu√°rios',
    },
    // Machines permissions
    {
      function_name: 'machines',
      permission_level: 'read',
      display_name: 'Visualizar M√°quinas',
      description: 'Permiss√£o para visualizar m√°quinas',
    },
    {
      function_name: 'machines',
      permission_level: 'write',
      display_name: 'Criar M√°quinas',
      description: 'Permiss√£o para criar m√°quinas',
    },
    {
      function_name: 'machines',
      permission_level: 'update',
      display_name: 'Editar M√°quinas',
      description: 'Permiss√£o para editar m√°quinas',
    },
    {
      function_name: 'machines',
      permission_level: 'delete',
      display_name: 'Excluir M√°quinas',
      description: 'Permiss√£o para excluir m√°quinas',
    },
    // Sensors permissions
    {
      function_name: 'sensors',
      permission_level: 'read',
      display_name: 'Visualizar Sensores',
      description: 'Permiss√£o para visualizar sensores',
    },
    {
      function_name: 'sensors',
      permission_level: 'write',
      display_name: 'Criar Sensores',
      description: 'Permiss√£o para criar sensores',
    },
    {
      function_name: 'sensors',
      permission_level: 'update',
      display_name: 'Editar Sensores',
      description: 'Permiss√£o para editar sensores',
    },
    {
      function_name: 'sensors',
      permission_level: 'delete',
      display_name: 'Excluir Sensores',
      description: 'Permiss√£o para excluir sensores',
    },
    // Modules permissions
    {
      function_name: 'modules',
      permission_level: 'read',
      display_name: 'Visualizar M√≥dulos',
      description: 'Permiss√£o para visualizar m√≥dulos',
    },
    {
      function_name: 'modules',
      permission_level: 'write',
      display_name: 'Criar M√≥dulos',
      description: 'Permiss√£o para criar m√≥dulos',
    },
    {
      function_name: 'modules',
      permission_level: 'update',
      display_name: 'Editar M√≥dulos',
      description: 'Permiss√£o para editar m√≥dulos',
    },
    {
      function_name: 'modules',
      permission_level: 'delete',
      display_name: 'Excluir M√≥dulos',
      description: 'Permiss√£o para excluir m√≥dulos',
    },
    // Views permissions
    {
      function_name: 'views',
      permission_level: 'read',
      display_name: 'Visualizar Views',
      description: 'Permiss√£o para visualizar views',
    },
    {
      function_name: 'views',
      permission_level: 'write',
      display_name: 'Criar Views',
      description: 'Permiss√£o para criar views',
    },
    {
      function_name: 'views',
      permission_level: 'update',
      display_name: 'Editar Views',
      description: 'Permiss√£o para editar views',
    },
    {
      function_name: 'views',
      permission_level: 'delete',
      display_name: 'Excluir Views',
      description: 'Permiss√£o para excluir views',
    },
    // Reports permissions
    {
      function_name: 'reports',
      permission_level: 'read',
      display_name: 'Visualizar Relat√≥rios',
      description: 'Permiss√£o para visualizar relat√≥rios',
    },
    {
      function_name: 'reports',
      permission_level: 'write',
      display_name: 'Gerar Relat√≥rios',
      description: 'Permiss√£o para gerar relat√≥rios',
    },
    // Dashboard permissions
    {
      function_name: 'dashboard',
      permission_level: 'read',
      display_name: 'Visualizar Dashboard',
      description: 'Permiss√£o para visualizar dashboard',
    },
    // Settings permissions
    {
      function_name: 'settings',
      permission_level: 'read',
      display_name: 'Visualizar Configura√ß√µes',
      description: 'Permiss√£o para visualizar configura√ß√µes',
    },
    {
      function_name: 'settings',
      permission_level: 'update',
      display_name: 'Editar Configura√ß√µes',
      description: 'Permiss√£o para editar configura√ß√µes',
    },
    // Roles permissions
    {
      function_name: 'roles',
      permission_level: 'read',
      display_name: 'Visualizar Roles',
      description: 'Permiss√£o para visualizar roles',
    },
    {
      function_name: 'roles',
      permission_level: 'write',
      display_name: 'Criar Roles',
      description: 'Permiss√£o para criar roles',
    },
    {
      function_name: 'roles',
      permission_level: 'update',
      display_name: 'Editar Roles',
      description: 'Permiss√£o para editar roles',
    },
    {
      function_name: 'roles',
      permission_level: 'delete',
      display_name: 'Excluir Roles',
      description: 'Permiss√£o para excluir roles',
    },
    // Permissions permissions
    {
      function_name: 'permissions',
      permission_level: 'read',
      display_name: 'Visualizar Permiss√µes',
      description: 'Permiss√£o para visualizar permiss√µes',
    },
    {
      function_name: 'permissions',
      permission_level: 'write',
      display_name: 'Criar Permiss√µes',
      description: 'Permiss√£o para criar permiss√µes',
    },
    {
      function_name: 'permissions',
      permission_level: 'update',
      display_name: 'Editar Permiss√µes',
      description: 'Permiss√£o para editar permiss√µes',
    },
    {
      function_name: 'permissions',
      permission_level: 'delete',
      display_name: 'Excluir Permiss√µes',
      description: 'Permiss√£o para excluir permiss√µes',
    },
    // Tenant permissions
    {
      function_name: 'tenants',
      permission_level: 'read',
      display_name: 'Visualizar Tenants',
      description: 'Permiss√£o para visualizar tenants',
    },
    {
      function_name: 'tenants',
      permission_level: 'write',
      display_name: 'Criar Tenants',
      description: 'Permiss√£o para criar tenants',
    },
    {
      function_name: 'tenants',
      permission_level: 'update',
      display_name: 'Editar Tenants',
      description: 'Permiss√£o para editar tenants',
    },
    {
      function_name: 'tenants',
      permission_level: 'delete',
      display_name: 'Excluir Tenants',
      description: 'Permiss√£o para excluir tenants',
    },
    // Applications permissions
    {
      function_name: 'applications',
      permission_level: 'read',
      display_name: 'Visualizar Aplica√ß√µes',
      description: 'Permiss√£o para visualizar aplica√ß√µes',
    },
    {
      function_name: 'applications',
      permission_level: 'write',
      display_name: 'Criar Aplica√ß√µes',
      description: 'Permiss√£o para criar aplica√ß√µes',
    },
    {
      function_name: 'applications',
      permission_level: 'update',
      display_name: 'Editar Aplica√ß√µes',
      description: 'Permiss√£o para editar aplica√ß√µes',
    },
    {
      function_name: 'applications',
      permission_level: 'delete',
      display_name: 'Excluir Aplica√ß√µes',
      description: 'Permiss√£o para excluir aplica√ß√µes',
    },
  ];

  // Criar permiss√µes para todas as aplica√ß√µes
  for (const app of createdApps) {
    for (const permissionData of systemPermissions) {
      const existingPermission = await prisma.permission.findFirst({
        where: {
          function_name: permissionData.function_name,
          permission_level: permissionData.permission_level,
          application_id: app.application_id,
        },
      });

      if (!existingPermission) {
        await prisma.permission.create({
          data: {
            function_name: permissionData.function_name,
            permission_level: permissionData.permission_level,
            display_name: permissionData.display_name,
            description: permissionData.description,
            application_id: app.application_id,
          },
        });
      }
    }
    logger.success(`‚úÖ Permiss√µes do sistema criadas para ${app.displayName}`);
  }

  logger.success('‚úÖ Permiss√µes do sistema criadas para todas as aplica√ß√µes');
  logger.success(
    '‚ÑπÔ∏è  Nota: O usu√°rio ROOT tem acesso total automaticamente pelo sistema de permiss√µes'
  );

  // Criar view padr√£o "Dashboard" para o usu√°rio root
  const existingView = await prisma.view.findFirst({
    where: {
      user_id: rootUser.user_id,
      name: 'Dashboard',
    },
  });

  if (!existingView) {
    await prisma.view.create({
      data: {
        name: 'Dashboard',
        user_id: rootUser.user_id,
        tenant_id: groupworkTenant.tenant_id,
        is_default: true,
        is_public: false,
        created_by: rootUser.user_id,
        updated_by: rootUser.user_id,
      },
    });
  }

  logger.success('‚úÖ View padr√£o "Dashboard" criada para o usu√°rio root');

  logger.success('üéâ Seed de desenvolvimento conclu√≠do com sucesso!');
  logger.success('üìã Dados criados:');
  logger.success(
    `   üè¢ Tenant: ${groupworkTenant.name} (${groupworkTenant.cnpj})`
  );
  logger.success(`   üë§ Root: ${rootUser.email}`);
  logger.success(`   üîë Senha: Root@2024`);
  logger.success(`   üéØ Acesso: Total (autom√°tico pelo sistema de permiss√µes)`);
  logger.success('üì± Aplica√ß√µes dispon√≠veis:');
  createdApps.forEach(app => {
    logger.success(`   ‚Ä¢ ${app.displayName} (${app.name})`);
  });
  logger.success('üîê Permiss√µes do sistema criadas para todos os usu√°rios');
}

main()
  .catch(e => {
    logger.error('‚ùå Erro durante o seed de desenvolvimento:', {
      error: e.message,
      stack: e.stack,
    });
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
